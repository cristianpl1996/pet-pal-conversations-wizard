
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Phone, Calendar, Pill, Heart, AlertTriangle, Users, Plus, Sparkles } from 'lucide-react';

interface VoiceObjectiveStepProps {
  onNext: (objectives: any) => void;
  onBack: () => void;
}

export function VoiceObjectiveStep({ onNext, onBack }: VoiceObjectiveStepProps) {
  const [selectedObjectives, setSelectedObjectives] = useState<string[]>([]);
  const [customObjective, setCustomObjective] = useState('');
  const [showCustom, setShowCustom] = useState(false);

  const objectives = [
    {
      id: 'general-calls',
      title: 'Atender llamadas y responder dudas generales',
      icon: Phone,
      description: 'Información básica, horarios, servicios',
      color: 'bg-blue-500'
    },
    {
      id: 'appointments',
      title: 'Agendar o confirmar citas automáticamente',
      icon: Calendar,
      description: 'Gestión completa de agenda',
      color: 'bg-green-500'
    },
    {
      id: 'products',
      title: 'Recomendar productos veterinarios',
      icon: Pill,
      description: 'Sugerir medicamentos y alimentos',
      color: 'bg-purple-500'
    },
    {
      id: 'post-surgery',
      title: 'Dar indicaciones postquirúrgicas',
      icon: Heart,
      description: 'Cuidados después de procedimientos',
      color: 'bg-pink-500'
    },
    {
      id: 'emergencies',
      title: 'Filtrar urgencias',
      icon: AlertTriangle,
      description: 'Identificar casos que necesitan atención inmediata',
      color: 'bg-red-500'
    },
    {
      id: 'redirect',
      title: 'Redirigir al personal adecuado',
      icon: Users,
      description: 'Derivar a veterinario, recepción o administración',
      color: 'bg-orange-500'
    }
  ];

  const toggleObjective = (objectiveId: string) => {
    setSelectedObjectives(prev => 
      prev.includes(objectiveId)
        ? prev.filter(id => id !== objectiveId)
        : [...prev, objectiveId]
    );
  };

  const handleNext = () => {
    const config = {
      selectedObjectives,
      customObjective: showCustom ? customObjective : '',
      autoGenerated: true
    };
    onNext(config);
  };

  const isValid = () => {
    return selectedObjectives.length > 0 || (showCustom && customObjective.trim());
  };

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <div className="text-6xl mb-4">🎯</div>
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">
          ¿Qué quieres que haga tu agente de voz?
        </h2>
        <p className="text-gray-600">
          Selecciona uno o varios objetivos y configuraremos todo por ti. Sin necesidad de conocimientos técnicos.
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {objectives.map((objective) => {
          const Icon = objective.icon;
          const isSelected = selectedObjectives.includes(objective.id);
          
          return (
            <Card
              key={objective.id}
              className={`cursor-pointer transition-all duration-200 hover:shadow-md ${
                isSelected ? 'ring-2 ring-purple-500 bg-purple-50' : 'hover:bg-gray-50'
              }`}
              onClick={() => toggleObjective(objective.id)}
            >
              <CardContent className="p-4">
                <div className="flex items-start space-x-3">
                  <div className={`w-10 h-10 ${objective.color} rounded-lg flex items-center justify-center shrink-0`}>
                    <Icon className="w-5 h-5 text-white" />
                  </div>
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-800 mb-1">
                      {objective.title}
                    </h3>
                    <p className="text-sm text-gray-600">
                      {objective.description}
                    </p>
                  </div>
                  {isSelected && (
                    <Badge className="bg-purple-500">
                      Seleccionado
                    </Badge>
                  )}
                </div>
              </CardContent>
            </Card>
          );
        })}

        {/* Custom Option */}
        <Card
          className={`cursor-pointer transition-all duration-200 hover:shadow-md ${
            showCustom ? 'ring-2 ring-purple-500 bg-purple-50' : 'hover:bg-gray-50'
          }`}
          onClick={() => setShowCustom(!showCustom)}
        >
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <div className="w-10 h-10 bg-gray-500 rounded-lg flex items-center justify-center shrink-0">
                <Plus className="w-5 h-5 text-white" />
              </div>
              <div className="flex-1">
                <h3 className="font-medium text-gray-800 mb-1">
                  Otro objetivo personalizado
                </h3>
                <p className="text-sm text-gray-600">
                  Describe qué más necesitas que haga tu agente
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {showCustom && (
        <Card className="border-purple-200">
          <CardContent className="pt-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Describe tu objetivo personalizado
            </label>
            <Textarea
              value={customObjective}
              onChange={(e) => setCustomObjective(e.target.value)}
              placeholder="Ej: Quiero que atienda consultas sobre nutrición canina y felina..."
              className="resize-none"
              rows={3}
            />
          </CardContent>
        </Card>
      )}

      {selectedObjectives.length > 0 && (
        <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
          <div className="flex items-start space-x-3">
            <Sparkles className="w-5 h-5 text-blue-500 mt-0.5" />
            <div>
              <h4 className="font-medium text-blue-800">Configuración automática</h4>
              <p className="text-sm text-blue-700 mt-1">
                Basado en tu selección, preconfiguraremos automáticamente:
                voz del asistente, reconocimiento de voz, flujo conversacional y respuestas inteligentes.
              </p>
            </div>
          </div>
        </div>
      )}

      <div className="flex justify-between pt-6">
        <Button variant="outline" onClick={onBack}>
          Atrás
        </Button>
        <Button
          onClick={handleNext}
          disabled={!isValid()}
          className="bg-purple-600 hover:bg-purple-700 px-8"
        >
          <Sparkles className="w-4 h-4 mr-2" />
          Crear flujo automáticamente
        </Button>
      </div>
    </div>
  );
}
