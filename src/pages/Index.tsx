import { useState } from 'react';
import { StepContainer } from '@/components/StepContainer';
import { AgentTypeSelector } from '@/components/AgentTypeSelector';
import { ObjectiveStep } from '@/components/ObjectiveStep';
import { KnowledgeStep } from '@/components/KnowledgeStep';
import { BrandsStep } from '@/components/BrandsStep';
import { ConfigStep } from '@/components/ConfigStep';
import { SimulatorStep } from '@/components/SimulatorStep';
import { DeployStep } from '@/components/DeployStep';
import { WhatsAppClinicAreasStep } from '@/components/WhatsAppClinicAreasStep';
import { WhatsAppFlowConnectionStep } from '@/components/WhatsAppFlowConnectionStep';
import { VoiceClinicAreasStep } from '@/components/voice/VoiceClinicAreasStep';
import { VoiceFlowConnectionStep } from '@/components/voice/VoiceFlowConnectionStep';

// Voice Agent Steps
import { VoiceObjectiveStep } from '@/components/voice/VoiceObjectiveStep';
import { VoiceFlowPreviewStep } from '@/components/voice/VoiceFlowPreviewStep';
import { VoiceConfigStep } from '@/components/voice/VoiceConfigStep';
import { VoiceKnowledgeStep } from '@/components/voice/VoiceKnowledgeStep';
import { VoiceProvidersStep } from '@/components/voice/VoiceProvidersStep';
import { VoicePhoneStep } from '@/components/voice/VoicePhoneStep';
import { VoiceCallLogsStep } from '@/components/voice/VoiceCallLogsStep';
import { VoiceActivationStep } from '@/components/voice/VoiceActivationStep';

interface AppConfig {
  objective?: string;
  clinicType?: string;
  knowledge?: any;
  brands?: string[];
  config?: any;
  clinicAreas?: any;
  flowConnections?: any;
}

interface VoiceConfig {
  objectives?: any;
  flowPreview?: any;
  voiceSettings?: any;
  knowledge?: any;
  clinicAreas?: any;
  flowConnections?: any;
  providers?: any;
  phone?: any;
  callLogs?: any;
}

const Index = () => {
  const [agentType, setAgentType] = useState<'whatsapp' | 'voice' | null>(null);
  const [currentStep, setCurrentStep] = useState(0);
  const [appConfig, setAppConfig] = useState<AppConfig>({});
  const [voiceConfig, setVoiceConfig] = useState<VoiceConfig>({});
  const [isQuickCreation, setIsQuickCreation] = useState(false);
  const [expertMode, setExpertMode] = useState(false);
  const [guidedMode, setGuidedMode] = useState(true);

  const whatsappSteps = [
    'Objetivo',
    'Conocimiento', 
    'Marcas',
    'Configuración',
    'Áreas de la Clínica',
    'Flujo de Comunicación',
    'Simulador',
    'Despliegue'
  ];

  const voiceSteps = [
    'Objetivos',
    'Vista Previa del Flujo',
    'Configuración de Voz',
    'Conocimiento',
    'Áreas de la Clínica',
    'Flujo de Comunicación',
    'Conexiones',
    'Configuración Telefónica',
    'Despliegue',
    'Activación'
  ];
  console.log('voiceSteps defined with length:', voiceSteps.length, 'steps:', voiceSteps);

  const updateConfig = (key: keyof AppConfig, value: any) => {
    setAppConfig(prev => ({ ...prev, [key]: value }));
  };

  const updateVoiceConfig = (key: keyof VoiceConfig, value: any) => {
    setVoiceConfig(prev => ({ ...prev, [key]: value }));
  };

  const nextStep = () => {
    const maxSteps = agentType === 'voice' ? voiceSteps.length - 1 : whatsappSteps.length - 1;
    console.log('nextStep called. Current step:', currentStep, 'Max steps:', maxSteps, 'Voice steps length:', voiceSteps.length);
    setCurrentStep(prev => {
      const newStep = Math.min(prev + 1, maxSteps);
      console.log('Setting step from', prev, 'to', newStep);
      return newStep;
    });
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 0));
  };

  const goToStep = (step: number) => {
    setCurrentStep(step);
  };

  const resetFlow = () => {
    setAgentType(null);
    setCurrentStep(0);
    setAppConfig({});
    setVoiceConfig({});
    setIsQuickCreation(false);
    setExpertMode(false);
    setGuidedMode(true);
  };

  const handleQuickCreate = (description: string) => {
    setAgentType('voice');
    setIsQuickCreation(true);
    setGuidedMode(true);
    updateVoiceConfig('objectives', { quickDescription: description, autoGenerated: true });
    setCurrentStep(0);
  };

  const enableExpertMode = () => {
    setExpertMode(true);
    setGuidedMode(false);
  };

  // Agent Type Selection
  if (!agentType) {
    return <AgentTypeSelector onSelectType={setAgentType} onQuickCreate={handleQuickCreate} />;
  }

  // WhatsApp Agent Flow
  if (agentType === 'whatsapp') {
    const renderWhatsAppStep = () => {
      switch (currentStep) {
        case 0:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Define el objetivo"
              subtitle="¿Qué quieres que logre tu agente conversacional?"
              steps={whatsappSteps}
              onBack={resetFlow}
            >
              <ObjectiveStep 
                onNext={(objective, clinicType) => {
                  updateConfig('objective', objective);
                  updateConfig('clinicType', clinicType);
                  nextStep();
                }} 
              />
            </StepContainer>
          );

        case 1:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Agrega conocimiento"
              subtitle="Enseña a tu agente sobre tu clínica veterinaria"
              steps={whatsappSteps}
              onBack={resetFlow}
            >
              <KnowledgeStep 
                onNext={(knowledge) => {
                  updateConfig('knowledge', knowledge);
                  nextStep();
                }}
                onBack={prevStep}
              />
            </StepContainer>
          );

        case 2:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Selecciona marcas"
              subtitle="¿Qué marcas veterinarias manejas en tu clínica?"
              steps={whatsappSteps}
              onBack={resetFlow}
            >
              <BrandsStep 
                onNext={(brands) => {
                  updateConfig('brands', brands);
                  nextStep();
                }}
                onBack={prevStep}
              />
            </StepContainer>
          );

        case 3:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Configura el comportamiento"
              subtitle="Define cómo interactuará con tus clientes"
              steps={whatsappSteps}
              onBack={resetFlow}
            >
              <ConfigStep 
                onNext={(config) => {
                  updateConfig('config', config);
                  nextStep();
                }}
                onBack={prevStep}
              />
            </StepContainer>
          );

        case 4:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Crea las áreas de tu clínica"
              subtitle="Define las áreas internas donde podrías redirigir a tus clientes"
              steps={whatsappSteps}
              onBack={resetFlow}
            >
              <WhatsAppClinicAreasStep 
                onNext={(clinicAreas) => {
                  updateConfig('clinicAreas', clinicAreas);
                  nextStep();
                }}
                onBack={prevStep}
                guidedMode={true}
              />
            </StepContainer>
          );

        case 5:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Define el flujo entre recepción y tus áreas"
              subtitle="Conecta la recepción con las áreas que creaste"
              steps={whatsappSteps}
              onBack={resetFlow}
            >
              <WhatsAppFlowConnectionStep 
                onNext={(flowConnections) => {
                  updateConfig('flowConnections', flowConnections);
                  nextStep();
                }}
                onBack={prevStep}
                areas={appConfig.clinicAreas || []}
                guidedMode={true}
              />
            </StepContainer>
          );

        case 6:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Prueba tu agente"
              subtitle="Simula conversaciones para verificar el funcionamiento"
              steps={whatsappSteps}
              onBack={resetFlow}
            >
              <SimulatorStep 
                onNext={nextStep}
                onBack={prevStep}
                config={appConfig}
              />
            </StepContainer>
          );

        case 7:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="¡Listo para desplegar!"
              subtitle="Revisa la configuración y lanza tu agente"
              steps={whatsappSteps}
              onBack={resetFlow}
            >
              <DeployStep 
                onBack={prevStep}
                onEdit={goToStep}
                config={appConfig}
              />
            </StepContainer>
          );

        default:
          return null;
      }
    };

    return renderWhatsAppStep();
  }

  // Voice Agent Flow
  if (agentType === 'voice') {
    const renderVoiceStep = () => {
      switch (currentStep) {
        case 0:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title={guidedMode ? "Funciones del Asistente" : "Objetivos del Agente"}
              subtitle={guidedMode ? "Selecciona qué quieres que haga tu asistente telefónico" : "Selecciona qué quieres que haga tu agente de voz"}
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceObjectiveStep 
                onNext={(objectives) => {
                  updateVoiceConfig('objectives', objectives);
                  nextStep();
                }}
                onBack={resetFlow}
                onEnableExpertMode={enableExpertMode}
                guidedMode={guidedMode}
                setGuidedMode={setGuidedMode}
              />
            </StepContainer>
          );

        case 1:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Vista Previa del Flujo"
              subtitle="Revisa el flujo conversacional generado automáticamente"
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceFlowPreviewStep 
                onNext={(flowPreview) => {
                  updateVoiceConfig('flowPreview', flowPreview);
                  nextStep();
                }}
                onBack={prevStep}
                objectives={voiceConfig.objectives}
                expertMode={expertMode}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        case 2:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title={guidedMode ? "Personalización de Voz" : "Configuración de Voz"}
              subtitle={guidedMode ? "Personaliza la voz de tu asistente telefónico" : "Personaliza la voz y reconocimiento de audio"}
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceConfigStep 
                onNext={(voiceSettings) => {
                  updateVoiceConfig('voiceSettings', voiceSettings);
                  nextStep();
                }}
                onBack={prevStep}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        case 3:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title={guidedMode ? "Conocimiento de tu Clínica" : "Integración de Conocimiento"}
              subtitle={guidedMode ? "Enséñale a tu asistente sobre tu clínica y marcas" : "Conecta el conocimiento de tu clínica y marcas"}
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceKnowledgeStep 
                onNext={(knowledge) => {
                  updateVoiceConfig('knowledge', knowledge);
                  nextStep();
                }}
                onBack={prevStep}
                existingBrands={appConfig.brands}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        case 4:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title={guidedMode ? "Áreas de tu Clínica" : "Configuración de Áreas"}
              subtitle={guidedMode ? "Define las áreas internas donde podrías redirigir a tus clientes" : "Configura las áreas y responsables de tu clínica"}
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceClinicAreasStep 
                onNext={(clinicAreas) => {
                  updateVoiceConfig('clinicAreas', clinicAreas);
                  nextStep();
                }}
                onBack={prevStep}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        case 5:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title={guidedMode ? "Flujo de Comunicación" : "Configuración de Flujos"}
              subtitle={guidedMode ? "Conecta la recepción con las áreas que creaste" : "Define cómo se conectan las áreas de tu clínica"}
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceFlowConnectionStep 
                onNext={(flowConnections) => {
                  updateVoiceConfig('flowConnections', flowConnections);
                  nextStep();
                }}
                onBack={prevStep}
                areas={voiceConfig.clinicAreas || []}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        case 6:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title={guidedMode ? "Conexiones y Servicios" : "Proveedores y Conexiones"}
              subtitle={guidedMode ? "Activamos automáticamente los mejores servicios" : "Configura las conexiones con servicios de IA y voz"}
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceProvidersStep 
                onNext={(providers) => {
                  updateVoiceConfig('providers', providers);
                  nextStep();
                }}
                onBack={prevStep}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        case 7:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title={guidedMode ? "Línea Telefónica" : "Configuración Telefónica"}
              subtitle={guidedMode ? "Configura el número telefónico de tu asistente" : "Configura el número y opciones de llamada"}
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoicePhoneStep 
                onNext={(phone) => {
                  updateVoiceConfig('phone', phone);
                  nextStep();
                }}
                onBack={prevStep}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        case 8:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title={guidedMode ? "¡Tu Asistente Telefónico está Listo!" : "Registro de Llamadas"}
              subtitle={guidedMode ? "Revisa la configuración final y despliega tu asistente" : "Monitorea y analiza las conversaciones de tu agente"}
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceCallLogsStep 
                onNext={nextStep}
                onBack={prevStep}
                config={voiceConfig}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        case 9:
          return (
            <StepContainer 
              currentStep={currentStep} 
              title="Activación"
              subtitle="¿Cómo deseas activar tu agente?"
              steps={voiceSteps}
              onBack={resetFlow}
            >
              <VoiceActivationStep 
                onBack={prevStep}
                config={voiceConfig}
                guidedMode={guidedMode}
              />
            </StepContainer>
          );

        default:
          return null;
      }
    };

    return renderVoiceStep();
  }

  return null;
};

export default Index;
